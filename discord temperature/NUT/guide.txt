# ------------------------------
# NUT + Docker + Discord Shutdown Integration
# ------------------------------
# Script Location: /home/scripts/ups_shutdown.sh
# Make sure it's executable: chmod +x /home/scripts/ups_shutdown.sh

#!/bin/bash

# Set PATH to ensure Docker commands are found
export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

# Log file path
LOGFILE="/var/log/pwrstatd-powerfail.log"

# Redirect all output to the log file
exec > >(tee -a $LOGFILE) 2>&1

# Capture the start time of the script
start_time=$(date +%s)

# Discord Webhook URL and User ID for notifications
WEBHOOK_URL="<put here>"
USER_ID="<put here>"

send_shutdown_warning(){
    echo "Sending Discord notification: Warning: The system is shutting down."
    local payload="{\"content\": \"<@${USER_ID}> :red_circle: **Warning: The system is shutting down soon.**\"}"
    curl -H "Content-Type: application/json" -X POST -d "$payload" "$WEBHOOK_URL"
}

send_shutdown_info() {
    local message="$1"
    echo "Sending Discord notification: $message"
    message=$(echo "$message" | sed 's/"/\\"/g' | sed 's/\n/\\n/g' | sed 's/\r//g')
    local payload="{\"content\": \"$message\"}"
    curl -H "Content-Type: application/json" -X POST -d "$payload" "$WEBHOOK_URL"
}

send_shutdown_info_C() {
    local message="$1"
    local running_containers="$2"
    running_containers=${running_containers//$'\n'/\\n}
    message=$(echo "$message" | sed 's/"/\\"/g' | sed 's/\n/\\n/g' | sed 's/\r//g')
    message+="\n\`\`\`\n${running_containers}\n\`\`\`"
    echo "Sending Discord notification: $message"
    local payload="{\"content\": \"$message\"}"
    curl -H "Content-Type: application/json" -X POST -d "$payload" "$WEBHOOK_URL"
}

stop_docker_containers() {
    local running_containers=$(docker ps --format "{{.Names}}" | sort)
    if [ -n "$running_containers" ]; then
        echo "Stopping the following Docker containers:"
        echo "$running_containers"
        send_shutdown_info_C ":card_box: **Stopping the following Docker containers:**" "$running_containers"
        docker stop $(docker ps -q)
        local new_running_containers=$(docker ps --format "{{.Names}}" | sort)
        local stopped_containers=$(comm -23 <(echo "$running_containers") <(echo "$new_running_containers"))
        send_shutdown_info_C ":satellite_orbital: **Docker containers have been stopped:**" "$stopped_containers"
        echo "Docker containers have been stopped."
    else
        echo "No running Docker containers to stop."
        send_shutdown_info ":rotating_light:***No running Docker containers to stop.***"
    fi
}

# Main execution
echo "Starting shutdown sequence..."
send_shutdown_warning
echo "Initiating Docker container shutdown..."
stop_docker_containers

# Wait 20 seconds for cleanup
echo "Waiting 20 seconds to allow containers and services to finalize..."
sleep 20

end_time=$(date +%s)
execution_time=$((end_time - start_time))
echo "Shutdown sequence completed in $execution_time seconds."
send_shutdown_info ":stopwatch: Shutdown sequence completed in *$execution_time seconds*."

# ------------------------------
# /etc/nut/upssched.conf
# ------------------------------
# Ensure these lines exist:
CMDSCRIPT /etc/nut/upssched-cmd
PIPEFN /etc/nut/upssched.pipe
LOCKFN /etc/nut/upssched.lock

AT ONBATT * START-TIMER earlyshutdown 30
AT ONLINE * CANCEL-TIMER earlyshutdown
AT LOWBATT * EXECUTE earlyshutdown

# ------------------------------
# /etc/nut/upssched-cmd
# ------------------------------
# Create this as a script, make it executable: chmod +x /etc/nut/upssched-cmd

#!/bin/bash